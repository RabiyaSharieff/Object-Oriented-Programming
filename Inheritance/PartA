#include <iostream>
#include <string>
#include <vector>
using namespace std;



class Instrument {
public:
    //instrument becomes an abstract class
    virtual void makeSound() const = 0;
    
};



class Percussion: public Instrument {
public:
    Percussion () {}
    void makeSound() const {
        cout << " To make a sound >>> hit me!\n";
    }
};

class Drum : public Percussion {
public:
    Drum() : Percussion() {}
};

class Cymbal : public Percussion {
public:
    Cymbal() : Percussion() {}
    
};





class String : public Instrument {
private:
    unsigned pitch;
public:
    String(unsigned aPitch) : pitch(aPitch) {}
       void makeSound() const {
           cout << "To make a sound.. bow a string with pitch " << pitch << endl;
    }
};

class Violin : public String {
public:
   Violin(unsigned aPitch) : String (aPitch) {}
};

class Cello : public String {
public:
   Cello(unsigned aPitch) : String (aPitch) {}
};





class Brass : public Instrument {
private:
    unsigned size;
public:
   Brass(unsigned mouthpiece){
       if (mouthpiece ==4 || mouthpiece == 9 || mouthpiece == 12 ){
           size = mouthpiece;
       } else {
           cerr << "Mouthpiece not correct size\n";
           exit(1);
        }
    }

    virtual void makeSound() const { //virtual
        cout << "To make a sound...blow on a mouthpiece of size " << size;
        cout << endl;
    }
};

class Trombone : public Brass {
public: Trombone(unsigned mouthpiece) : Brass(mouthpiece){}
};

   class Trumpet : public Brass {
   public:
       Trumpet(unsigned mouthpice) : Brass(mouthpice) {}
   };



   class MILL{
   private:
       vector<Instrument*> bin;
   public:
       MILL () {}
       void receiveInstr(Instrument& newInst){
           for (size_t i =0; i< bin.size(); i++){
               if (bin[i] == nullptr){
                   bin[i] = &newInst;
                   return;
               }
           }
           //cout << "carpenters help!\n";
           bin.push_back(&newInst);
       }
       
       void dailyTestPlay() const {
           for(size_t i = 0; i < bin.size(); i++){
               if (bin[i] != nullptr){
                   bin[i]->makeSound();
               }
           }
       }
       Instrument* loanOut() {
           for (size_t i = 0; i < bin.size(); i++){
               if (bin[i] != nullptr) {
                   Instrument* loaner = bin[i];
                   bin[i] = nullptr;
                   return loaner;
               }
           }
           return nullptr;
       }
   };


   class Musician {
   public:
       Musician() : instr(nullptr) {}
       
       void acceptInstr(Instrument* instPtr) { instr = instPtr; }
       
       Instrument* giveBackInstr() {
           Instrument* result(instr);
           instr = nullptr;
           return result;
       }
       
       void testPlay() const {
           if (instr) instr->makeSound();
           else cerr << "have no instr\n";
       }
       
   private:
       Instrument* instr;
   };


// PART ONE
int main() {
   
    cout << "Define some instruments ------------------------------------\n";
    Drum drum;
    Cello cello(673);
    Cymbal cymbal;
    Trombone tbone(4);
    Trumpet trpt(12) ;
    Violin violin(567) ;
   
    // use the debugger to look at the mill
    cout << "Define the MILL --------------------------------------------\n";
    MILL mill;
   
    cout << "Put the instruments into the MILL --------------------------\n";
    mill.receiveInstr(trpt);
    mill.receiveInstr(violin);
    mill.receiveInstr(tbone);
    mill.receiveInstr(drum);
    mill.receiveInstr(cello);
    mill.receiveInstr(cymbal);
   
    cout << "Daily test -------------------------------------------------\n";
    cout << endl;
    cout << "dailyTestPlay()" << endl;
    mill.dailyTestPlay();
    cout << endl;
   
    cout << "Define some Musicians---------------------------------------\n";
    Musician harpo;
    Musician groucho;
   
    cout << "TESTING: groucho.acceptInstr(mill.loanOut());---------------\n";
    groucho.testPlay();
    cout << endl;
    groucho.acceptInstr(mill.loanOut());
    cout << endl;
    groucho.testPlay();
    cout << endl;
    cout << "dailyTestPlay()" << endl;
    mill.dailyTestPlay();
   
    cout << endl << endl;
   
    groucho.testPlay();
    cout << endl;
    mill.receiveInstr(*groucho.giveBackInstr());
    harpo.acceptInstr(mill.loanOut());
    groucho.acceptInstr(mill.loanOut());
    cout << endl;
    groucho.testPlay();
    cout << endl;
    harpo.testPlay();
    cout << endl;
    cout << "dailyTestPlay()" << endl;
    mill.dailyTestPlay();
   
    cout << "TESTING: mill.receiveInstr(*groucho.giveBackInstr()); ------\n";
   
    // fifth
    mill.receiveInstr(*groucho.giveBackInstr());
    cout << "TESTING: mill.receiveInstr(*harpo.giveBackInstr()); ------\n";
    mill.receiveInstr(*harpo.giveBackInstr());
   
   
    cout << endl;
    cout << "dailyTestPlay()" << endl;
    mill.dailyTestPlay();
    cout << endl;
   
    cout << endl;
}

